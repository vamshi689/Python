# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vZw4Gg0Gu_GSwhtyRhivRpybtLGQFCgM
"""

#LOCAL VARIABLES
def fun():
 a=10
 b=20
 print(a,b)
fun()

# map iterator
l=(1,4,5,6)
a=iter(l)
print(list(a))

l=[1,2,3,4]
a=iter(a)
print(next(a))

#generators
#yield
def multi_yield():
 str1='python'
 for i in str1:
  print yield i
 str2="java"
 print(yield (str2))
 str3="HTML"
 print(yield (str3))

file=open('rivers.txt',"w")
file.write('ganga')
file.close()

file=open('rivers.txt')
data=file.read()
print(data)
file.close()

import pickle
file=open("list.",'wb')
data=[1,2,3,4]
pickle.dump(data,file)
file.close()

file=open("list.","rb")
print(file.read())
file.close()

import pickle
file=open("list.","rb")
data=pickle.load(file)
print(data)
file.close()

str="subbaiah"
for i in str:
  print(i)

for i in range(0,20,2):
  print(i,end=" ")

"""nxt() method"""

l=[1,2,3]
iter=iter(l)
print(next(iter))

"""nxt() iterating a list loop"""

a=[1,2,3]
iter_1=iter(a)
while True:
  item=next(iter_1,"end")
  if item =="end":
    break
  print(item)

"""nxt item from iterator"""

list=[1,2,3,4,5]
iter=iter(list)
print("1st item:",next(iter))
print("2nd item:",next(iter))

# nxt stop iteration
list=iter([1,2])
print("nxt item", next(list))
print("nxt item", next(list))

class Bank:
      bank_name="SBI"
      IFSC_Code="SBIN0069"
      def __init__(self,Balance,Deposit,Withdrawal):
            self.Balance=Balance
            self.Deposit=Deposit
            self.Withdrawal=Withdrawal
      def Balance123(self):
        print(self.Balance)
      def Deposit123(self):
       print(self.Balance+self.Deposit)
      def Withdrawal123(self):
       print(self.Withdrawal - self.Withdrawal)
obj=Bank(100,50,50)
print(obj.bank_name)
print(obj.IFSC_Code)
obj.Balance123()
obj.Deposit123()
obj.Withdrawal123()

class demo:

  def __init__(self,a):
   self.a=a
  def __add__(self,other):
   return self.a+other.a
obj1=demo(2)
print(obj1.__dict__)
obj2=demo(4)
print(obj2.__dict__)
print(obj1+obj2)

class demo:

   def __init__(self,a):
    self. a=a
   def __add__(self,other):
        return self.a+other.a
obj1=demo(2)
print(obj1.__dict__)
obj2=demo(4)
print(obj2.__dict__)
print(obj1+obj2)

class demo:
   atrr1="python"
   attr2="iot"
   print(type(obj))
obj=demo()

class demo:
  def method(self):
    self.a=20
    self.b=30
    print(self.a+self.b)
obj=demo()
obj=method(``)